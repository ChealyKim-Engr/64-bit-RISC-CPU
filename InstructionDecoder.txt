`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 10/24/2019 07:56:42 AM
// Design Name: 
// Module Name: InstructionDecoder
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module InstructionDecoder(Opcode, Reg2Loc, ALUSrc,
                          MemtoReg, RegWrite, MemRead, 
                          MemWrite, Branch, ALUOp1, ALUOp0);
                          
     input [10:0] Opcode;
     output Reg2Loc, ALUSrc;
     output MemtoReg, RegWrite, MemRead;
     output MemWrite, Branch, ALUOp1, ALUOp0;
     
     reg Reg2Loc, ALUSrc;
     reg MemtoReg, RegWrite, MemRead;
     reg MemWrite, Branch, ALUOp1, ALUOp0;  
     
     always@ (Opcode)
     case (Opcode)
        11'b11111000010:   //load
                        begin
                            Reg2Loc  <= 1'b1; ALUSrc   <= 1; MemtoReg <= 1;
                            RegWrite <= 1;    MemRead  <= 1; MemWrite <= 0;
                            Branch   <= 0; {ALUOp1, ALUOp0} <= 2'b00;                     
                        end  
                        
         11'b11111000000:  //store
                        begin
                             Reg2Loc  <= 1; ALUSrc   <= 1; MemtoReg <= 1'b1;
                             RegWrite <= 0; MemRead  <= 0; MemWrite <= 1;
                             Branch   <= 0; {ALUOp1, ALUOp0} <= 2'b00;                     
                        end 
         11'b10001011000://ADD
                        begin
                             Reg2Loc  <= 0; ALUSrc   <= 0; MemtoReg <= 0;
                             RegWrite <= 1; MemRead  <= 0; MemWrite <= 0;
                             Branch   <= 0; {ALUOp1, ALUOp0} <= 2'b10;                     
                        end  
         11'b11001011000://SUB
                       begin
                            Reg2Loc  <= 0; ALUSrc   <= 0; MemtoReg <= 0;
                            RegWrite <= 1; MemRead  <= 0; MemWrite <= 0;
                            Branch   <= 0; {ALUOp1, ALUOp0} <= 2'b10;                     
                       end 
         11'b10001010000://AND
                      begin
                           Reg2Loc  <= 0; ALUSrc   <= 0; MemtoReg <= 0;
                           RegWrite <= 1; MemRead  <= 0; MemWrite <= 0;
                           Branch   <= 0; {ALUOp1, ALUOp0} <= 2'b10;                     
                      end  
         11'b10101010000://OR
                     begin
                          Reg2Loc  <= 0; ALUSrc   <= 0; MemtoReg <= 0;
                          RegWrite <= 1; MemRead  <= 0; MemWrite <= 0;
                          Branch   <= 0; {ALUOp1, ALUOp0} <= 2'b10;                     
                     end 
         11'b10110100000://CBZ
                     begin
                          Reg2Loc  <= 1; ALUSrc   <= 0; MemtoReg <= 1'b1;
                          RegWrite <= 0; MemRead  <= 0; MemWrite <= 0;
                          Branch   <= 1; {ALUOp1, ALUOp0} <= 2'b01;  
                     end                   
         default begin
                          Reg2Loc  <= 0; ALUSrc   <=0 ; MemtoReg <= 0;
                          RegWrite <= 0; MemRead  <= 0; MemWrite <= 0;
                          Branch   <= 0; {ALUOp1, ALUOp0} <= 2'b00;           
                  end
                                   
     endcase   
                          
endmodule
