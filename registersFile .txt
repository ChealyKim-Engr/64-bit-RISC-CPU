`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 09/23/2019 07:11:24 AM
// Design Name: 
// Module Name: registersFile
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module registersFile (clk, reset, wr_en, wr_addr, wr_data,
                    rd_addr_1, rd_addr_2, rd_data_1, 
                    rd_data_2);
    input clk, reset, wr_en;
    input [4:0] rd_addr_1, rd_addr_2, wr_addr;
    input [63:0] wr_data;
    output wire [63:0] rd_data_1, rd_data_2;
    
    reg [63:0] RF[0:31];
    //reg [63:0] dtA1, dtB2;
    integer i;
    
    always @(posedge clk, posedge reset)
        if (reset)
            begin
                for (i=0; i<256; i=i+1)
                    RF[i] <= 8'b0;               
            end
        else if (wr_en==1 && wr_addr) begin
            RF[wr_addr] <= wr_data;
        end
        else begin
            RF[wr_addr] <= RF[wr_addr];
        end 
        
    assign rd_data_1 = (wr_addr==rd_addr_1)? wr_data: RF[rd_addr_1];
    assign rd_data_2 = (wr_addr==rd_addr_2)? wr_data: RF[rd_addr_2];
        
endmodule
