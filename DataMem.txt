`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: CECS 530
// Engineer: Julie Kim
// 
// Create Date: 10/07/2019 08:25:34 PM
// Design Name: 
// Module Name: DataMem
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module DataMem(clk, reset, mem_wr, mem_rd, mem_addr,
               wr_data, rd_data);
               
    input clk, reset, mem_wr, mem_rd;
    input  [7:0] mem_addr;
    input  [63:0] wr_data;
    output [63:0] rd_data;
    
    wire   [63:0] rd_data;
    
    reg    [7:0] RF [0:255];
    
    integer i;
    
    always @(posedge clk, posedge reset)
        if (reset)
            begin
                for (i=0; i<256; i=i+1)
                    RF[i] = 8'b0;
                    
                RF[0] = 8'h00;
                RF[1] = 8'h00; 
                RF[2] = 8'h00; 
                RF[3] = 8'h00; 
                RF[4] = 8'h00; 
                RF[5] = 8'h00; 
                RF[6] = 8'h00; 
                RF[7] = 8'h00;  
                                  
                RF[8 + 0] = 8'h11;
                RF[8 + 1] = 8'h11; 
                RF[8 + 2] = 8'h11; 
                RF[8 + 3] = 8'h11; 
                RF[8 + 4] = 8'h11; 
                RF[8 + 5] = 8'h11; 
                RF[8 + 6] = 8'h11; 
                RF[8 + 7] = 8'h11;
                                    
                RF[16 + 0] = 8'h22;
                RF[16 + 1] = 8'h22; 
                RF[16 + 2] = 8'h22; 
                RF[16 + 3] = 8'h22; 
                RF[16 + 4] = 8'h22; 
                RF[16 + 5] = 8'h22; 
                RF[16 + 6] = 8'h22; 
                RF[16 + 7] = 8'h22;
                
                RF[24 + 0] = 8'h33;
                RF[24 + 1] = 8'h33; 
                RF[24 + 2] = 8'h33; 
                RF[24 + 3] = 8'h33; 
                RF[24 + 4] = 8'h33; 
                RF[24 + 5] = 8'h33; 
                RF[24 + 6] = 8'h33; 
                RF[24 + 7] = 8'h33;  
                
                                  
                RF[32 + 0] = 8'h44;
                RF[32 + 1] = 8'h44;
                RF[32 + 2] = 8'h44; 
                RF[32 + 3] = 8'h44; 
                RF[32 + 4] = 8'h44;                                           
                RF[32 + 5] = 8'h44; 
                RF[32 + 6] = 8'h44; 
                RF[32 + 7] = 8'h44;
                
                RF[40 + 0] = 8'h55;
                RF[40 + 1] = 8'h55; 
                RF[40 + 2] = 8'h55; 
                RF[40 + 3] = 8'h55; 
                RF[40 + 4] = 8'h55;                                           
                RF[40 + 5] = 8'h55; 
                RF[40 + 6] = 8'h55; 
                RF[40 + 7] = 8'h55;                
///**********
                RF[48 + 0] = 8'h66;
                RF[48 + 1] = 8'h66; 
                RF[48 + 2] = 8'h66; 
                RF[48 + 3] = 8'h66; 
                RF[48 + 4] = 8'h66; 
                RF[48 + 5] = 8'h66; 
                RF[48 + 6] = 8'h66; 
                RF[48 + 7] = 8'h66;
                                    
                RF[56 + 0] = 8'h77;
                RF[56 + 1] = 8'h77; 
                RF[56 + 2] = 8'h77; 
                RF[56 + 3] = 8'h77; 
                RF[56 + 4] = 8'h77; 
                RF[56 + 5] = 8'h77; 
                RF[56 + 6] = 8'h77; 
                RF[56 + 7] = 8'h77;
                
                RF[64 + 0] = 8'h88;
                RF[64 + 1] = 8'h88; 
                RF[64 + 2] = 8'h88; 
                RF[64 + 3] = 8'h88; 
                RF[64 + 4] = 8'h88; 
                RF[64 + 5] = 8'h88; 
                RF[64 + 6] = 8'h88; 
                RF[64 + 7] = 8'h88;  
                
                                  
                RF[72 + 0] = 8'h99;
                RF[72 + 1] = 8'h99;
                RF[72 + 2] = 8'h99; 
                RF[72 + 3] = 8'h99; 
                RF[72 + 4] = 8'h99;                                           
                RF[72 + 5] = 8'h99; 
                RF[72 + 6] = 8'h99; 
                RF[72 + 7] = 8'h99;
                                
                RF[80 + 0] = 8'haa;
                RF[80 + 1] = 8'haa; 
                RF[80 + 2] = 8'haa; 
                RF[80 + 3] = 8'haa; 
                RF[80 + 4] = 8'haa; 
                RF[80 + 5] = 8'haa; 
                RF[80 + 6] = 8'haa; 
                RF[80 + 7] = 8'haa;  
                
                RF[88 + 0] = 8'hbb;
                RF[88 + 1] = 8'hbb; 
                RF[88 + 2] = 8'hbb; 
                RF[88 + 3] = 8'hbb; 
                RF[88 + 4] = 8'hbb;                                           
                RF[88 + 5] = 8'hbb; 
                RF[88 + 6] = 8'hbb; 
                RF[88 + 7] = 8'hbb; 
                
                RF[96 + 0] = 8'hcc;
                RF[96 + 1] = 8'hcc; 
                RF[96 + 2] = 8'hcc; 
                RF[96 + 3] = 8'hcc; 
                RF[96 + 4] = 8'hcc;                                           
                RF[96 + 5] = 8'hcc; 
                RF[96 + 6] = 8'hcc; 
                RF[96 + 7] = 8'hcc; 
                
            end
        
        else if (mem_wr)
            begin
                RF[mem_addr + 0] <= wr_data[63:56];
                RF[mem_addr + 1] <= wr_data[55:48];
                RF[mem_addr+ 2] <= wr_data[47:40];
                RF[mem_addr + 3] <= wr_data[39:32];
                RF[mem_addr + 4] <= wr_data[31:24];
                RF[mem_addr + 5] <= wr_data[23:16];
                RF[mem_addr+ 6] <= wr_data[15:8];
                RF[mem_addr + 7] <= wr_data[7:0];
            end
         
         else 
            RF[mem_addr[7:0]] <= RF[mem_addr[7:0]];
            
         assign rd_data = (mem_rd)? 
                          {RF[mem_addr + 0], RF[mem_addr + 1], RF[mem_addr+ 2],
                           RF[mem_addr+ 3], RF[mem_addr+ 4], RF[mem_addr + 5],
                           RF[mem_addr + 6], RF[mem_addr + 7]} : rd_data;

endmodule
